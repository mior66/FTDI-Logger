// Print the main log window
function printLog() {
    // Create a new window for printing
    const printWindow = window.open('', '_blank');
    
    // Get the current filter
    const currentFilterValue = logFilter.value;
    const filterLabel = logFilter.options[logFilter.selectedIndex].text;
    
    // Create the content to print
    let printContent = `
        <html>
        <head>
            <title>FTDI Logger - ${filterLabel} Log</title>
            <style>
                body { font-family: monospace; padding: 20px; }
                h1 { font-size: 18px; margin-bottom: 10px; }
                .timestamp { color: #666; }
                .log-entry { margin-bottom: 5px; white-space: pre-wrap; }
                .error { color: #e74c3c; }
                .warning { color: #f39c12; }
                .info { color: #3498db; }
                .success { color: #2ecc71; }
                .footer { margin-top: 20px; font-size: 12px; color: #999; }
            </style>
        </head>
        <body>
            <h1>FTDI Logger - ${filterLabel} Log (${new Date().toLocaleString()})</h1>
            <div class="log-content">
    `;
    
    // Add the log entries
    const visibleEntries = logEntries.filter(entry => {
        if (currentFilterValue === 'full') return true;
        return entry.message.toLowerCase().includes(currentFilterValue.toLowerCase());
    });
    
    visibleEntries.forEach(entry => {
        const colorClass = applyColorCoding(entry.message);
        printContent += `<div class="log-entry ${colorClass}">
            <span class="timestamp">${entry.timestamp}</span> ${entry.message}
        </div>`;
    });
    
    // Close the HTML structure
    printContent += `
            </div>
            <div class="footer">
                Generated by FTDI Logger on ${new Date().toLocaleString()}
            </div>
        </body>
        </html>
    `;
    
    // Write to the new window and print
    printWindow.document.open();
    printWindow.document.write(printContent);
    printWindow.document.close();
    
    // Wait for content to load before printing
    printWindow.onload = function() {
        printWindow.print();
        // Don't close the window automatically to allow the user to cancel or adjust print settings
    };
}

// Print the errors window
function printErrors() {
    if (errorEntries.length === 0) {
        showNotification('No errors to print', 'warning');
        return;
    }
    
    // Create a new window for printing
    const printWindow = window.open('', '_blank');
    
    // Create the content to print
    let printContent = `
        <html>
        <head>
            <title>FTDI Logger - Errors, Exceptions and Warnings</title>
            <style>
                body { font-family: monospace; padding: 20px; }
                h1 { font-size: 18px; margin-bottom: 10px; }
                .timestamp { color: #666; }
                .log-entry { margin-bottom: 5px; white-space: pre-wrap; }
                .error { color: #e74c3c; }
                .warning { color: #f39c12; }
                .exception { color: #9b59b6; }
                .unexpected { color: #e67e22; }
                .connection { color: #3498db; }
                .footer { margin-top: 20px; font-size: 12px; color: #999; }
                .summary { margin: 15px 0; padding: 10px; background: #f8f8f8; border-radius: 4px; }
            </style>
        </head>
        <body>
            <h1>FTDI Logger - Errors, Exceptions and Warnings (${new Date().toLocaleString()})</h1>
            <div class="summary">
                <strong>Summary:</strong><br>
                Errors: ${errorCounts.error}<br>
                Failures: ${errorCounts.failure}<br>
                Warnings: ${errorCounts.warning}<br>
                Exceptions: ${errorCounts.exception}<br>
                Unexpected: ${errorCounts.unexpected}<br>
                Connection Issues: ${errorCounts.connection}
            </div>
            <div class="log-content">
    `;
    
    // Add the error entries
    errorEntries.forEach(entry => {
        const colorClass = applyColorCoding(entry.message);
        printContent += `<div class="log-entry ${colorClass}">
            <span class="timestamp">${entry.timestamp}</span> ${entry.message}
        </div>`;
    });
    
    // Close the HTML structure
    printContent += `
            </div>
            <div class="footer">
                Generated by FTDI Logger on ${new Date().toLocaleString()}
            </div>
        </body>
        </html>
    `;
    
    // Write to the new window and print
    printWindow.document.open();
    printWindow.document.write(printContent);
    printWindow.document.close();
    
    // Wait for content to load before printing
    printWindow.onload = function() {
        printWindow.print();
        // Don't close the window automatically to allow the user to cancel or adjust print settings
    };
}
